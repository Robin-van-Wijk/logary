kind: Deployment
apiVersion: apps/v1
metadata:
  name: docs-web

  annotations:
    sidecar.jaegertracing.io/inject: jaeger

spec:
  replicas: 1

  template:
    # metadata:
    #   annotations:
    #     prometheus.io/path: /metrics
    #     prometheus.io/scrape: "true"
    #     prometheus.io/port: "9114"

    spec:

      affinity:
        # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#always-co-located-in-the-same-node
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - docs-web # see your kustomization.yaml file
            topologyKey: kubernetes.io/hostname

          # https://blog.verygoodsecurity.com/posts/kubernetes-multi-az-deployments-using-pod-anti-affinity/
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - docs-web # see your kustomization.yaml file
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 100

      containers:
      - name: docs-web
        image: logary/docs-web

        ports:
        - name: http
          containerPort: 3000

        #- name: http-metrics
        #  containerPort: 9114

        # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#use-a-named-port

        # Accepting traffic initially?
        readinessProbe:
          httpGet:
            path: /
            port: 3000

        # Still working?
        livenessProbe:
          httpGet:
            path: /
            port: 3000

        resources:
          limits:
            cpu: 1000m
            memory: 500Mi
          requests:
            cpu: 10m
            memory: 20Mi