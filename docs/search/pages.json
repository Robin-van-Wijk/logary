{"1":{"id":"1","title":"","subtitle":["Professional logging, metrics and analytics for your apps","JS Quickstart",".Net Core Quickstart","Targets / Sinks","How does it work?","JS Documentation",".Net Core Documentation","FAQs","Tutorials","License ","&"," Credits","Logary Prometheus for .Net Core","Logary Rutta","Pricing"],"description":"","body":"Logary v5 — Professional logging, metrics and analytics for your apps Logary Analytics Logary is awesome for analytics and logging. Built with   for developers and business analysts.  Star Logary    Follow @logary Would you like to  proactively handle any negative experiences  that your users '  are having? Maybe you ' re 🤒/😴 giving all your interaction data to large american corporations ®? Or do you just want to measure  app latency  and  track revenue ? Then you ' ve come to the right place, because Logary solves that for you. Logary is a logging, tracing and metric library for .Net and JS as well as a stand-alone, ☁-native log router/ingress called Rutta. How does it work? .Net package   JS package Learn how to add analytics to your web/react-native apps. Instrument your backend services for a cloud native architecture. Logary can send logs, metrics and spans to a wide range of targets. Have a look here to see what ' s available! Let ' s have a look at this site and how we do analytics here... Read up on how to use the JavaScript library Read up on how to use the library Layout for FAQ page. Lorem ipsum dolor sit amet, consectetuer adipiscing elit Learn how to use Logary to visualise the state and interactions with your apps. Layout for license  &  credits page. Consectetuer adipiscing elit. xmlSpace= \" preserve \" > With  Logary.Prometheus  you can expose you app metrics for Prometheus and Grafana. A stand-alone, cloud-native log router and ingestion point for HTTP, UDP, ZeroMQ, TCP, and more. Purchase a commercial license to super-charge your company ' s logging, metrics and analytics, and improve Logary! Designed by  Xiaoying Riley  for developers {\"props\":{\"pageProps\":{}},\"page\":\"/\",\"query\":{},\"buildId\":\"development\"}","href":"/"},"2":{"id":"2","title":".Net Quickstart","subtitle":["Download .Net Core 2.2",".Net Core 2.2","Create your first application","Install the package","Hello World (F#)","Hello World (C#)"],"description":"","body":"Logary — .Net Quickstart Logary Analytics Start .Net Quickstart   Expected reading time:  4  minutes Download the  .NET Core 2.2 SDK  to try .NET Core on your Windows, macOS, or Linux machine. Visit  dotnet/core  if you prefer to use Docker containers. All .NET Core versions are available at  .NET Core Downloads  if you ' re looking for another .NET Core version. The latest version is  .NET Core 2.2  New features include: framework-dependent deployments, startup hooks, AAD authentication with Azure SQL, and support for Windows ARM32. After installing the .NET Core SDK, open a command prompt. Type the following dotnet commands to create and run a C# application. dotnet new console dotnet run After installing the .NET Core SDK, open a command prompt. Type the following dotnet commands to create and run a C# application. Hello World! The first step is to install the Logary package(s) from NuGet. paket add logary --version  \" > = 5.0.0 \" Or you ' re using NuGet/VS... Install-Package Logary -Version 5.0.0-rc.10 module  Logary.ConsoleApp.Program\n\n open  System\n open  Hopac\n open  Logary\n open  Logary.Message\n open  Logary.Configuration\n open  Logary.Targets\n\n [ < EntryPoint > ] \n let  main argv =\n   use  mre =  new  System.Threading.ManualResetEventSlim( false )\n   use  sub = Console.CancelKeyPress.Subscribe ( fun  _ - >  mre.Set())\n\n   let  logary =\n    Config.create  \" Logary.ConsoleApp \"   \" laptop \" \n    | >  Config.target (LiterateConsole.create LiterateConsole.empty  \" console \" )\n    | >  Config.ilogger (ILogger.Console Debug)\n    | >  Config.build\n    | >  run\n\n   let  logger = logary.getLogger  \" Logary.HelloWorld \" \n\n  logger.info (eventX  \" Hello world \" )\n\n  mre.Wait()\n   0 ﻿ namespace   Logary.CSharpExample \n{\n     using  System;\n     using  System.Threading;\n     using  System.Threading.Tasks;\n     using  Configuration;\n     using  CSharp;\n     using  Targets;\n     using  Adapters.Facade;\n\n     public   static   class   Program \n    {\n         public   static  Task < LogManager >   StartLiterate ( ) \n        {\n             return  LogaryFactory.New( \" Logary.CSharpExample \" , \" laptop \" ,\n                with = >  with.InternalLogger(ILogger.NewConsole(LogLevel.Debug))\n                        .Target < LiterateConsole.Builder > ( \" console1 \" ));\n        }\n\n         public   static   async  Task  SampleUsage ( Logger logger ) \n        {\n             // without async \n            logger.LogSimple(MessageModule.Event(LogLevel.Info,  \" User logged in \" ));\n            \n             // await placing the Hello World event in the buffer \n             await  logger.LogEvent(LogLevel.Debug,  \" Hello world. Important? {important} \" ,  new \n            {\n                important =  \" yes \" \n            });\n\n             // await logging the fatal event and getting an ack back from each of the configured \n             // targets \n             await  logger.LogEvent(LogLevel.Fatal,  \" Fatal application error on finaliser thread. \" , waitForAck:  true );\n\n             await  logger.LogEvent(LogLevel.Verbose,  \" We need to log this with backpressure. \" ,  new \n            {\n                tags =  new [] {  \" tag1 \" ,  \" tag2 \"  }\n            });\n\n             // alternatively, you can use the ack-explicit functions together with the \n             // data object model that ' s MessageModule. \n             var  message = MessageModule.Event(LogLevel.Warn,  \" Here be dragons! \" );\n             await  logger.LogWithAck(message);\n\n             var  val = logger.Time(() = > \n                    {\n                         for  ( int  i =  0 ; i  <   100 ; i++)\n                            Thread.Sleep( 1 );\n\n                         return   32 ;\n                    },  \" sample.config.computeAnswerToEverything \" )\n                ();\n\n             await  logger.LogEventFormat(LogLevel.Warn,\n                 \" {horses} is the answer to the universe and everything \" ,\n                val);\n\n             await  logger.Time(\n                    () = >  logger.LogEvent(LogLevel.Debug,  \" I wonder how long this takes \" ))\n                ();\n\n             try \n            {\n                 throw   new  ApplicationException( \" thing went haywire \" );\n            }\n             catch  (Exception e)\n            {\n                 await  logger.LogEventFormat(LogLevel.Fatal,  \" Unhandled {exception}! \" , e);\n            }\n        }\n\n         public   static   void   SampleCibryyUsage ( Cibryy.Logging.ILogger logger ) \n        {\n           Cibryy.Core.Work(logger);\n           Cibryy.Core.WorkBackpressure(logger);\n           Cibryy.Core.ErrorWithBP(logger);\n           Cibryy.Core.SimpleWork(logger);\n           Cibryy.Core.GenerateAndLogExn(logger);\n           Cibryy.Core.StaticWork();\n        }\n\n         public   static   int   Main ( string [] args ) \n        {\n             // normal console app boilerplate; \n             var  mre =  new  ManualResetEventSlim( false );\n            System.Console.CancelKeyPress += (sender, arg) = >  mre.Set();\n\n             var  logary = StartLiterate().Result;\n            \n             // Usage with a library: \n            LogaryFacadeAdapter.Initialise < Cibryy.Logging.ILogger > (logary);\n             var  logger = logary.GetLogger( \" main \" );\n            SampleCibryyUsage(LoggerCSharpAdapter.Create < Cibryy.Logging.ILogger > (logger));\n            \n             // Usage in this program: \n            SampleUsage(logger).Wait();\n                \n             // Wait for CTRL+C \n            mre.Wait();\n             return   0 ;\n        }\n    }\n}\n Download .Net core 2.2 .Net Core 2.2 Create your first application Install the package Hello F# Hello C# Designed by  Xiaoying Riley  for developers {\"props\":{\"pageProps\":{}},\"page\":\"/dotnet/quickstart\",\"query\":{},\"buildId\":\"development\"}","href":"/logary-dotnet-quickstart"},"3":{"id":"3","title":"JavaScript Quickstart","subtitle":["Install the package"],"description":"","body":"Logary — Javacript Quickstart Logary Analytics Start JavaScript Quickstart   Expected reading time:  2  minutes The first step is to install the Logary package from npm. npm install --save logary Or you ' re using yarn... yarn add logary Install the package Designed by  Xiaoying Riley  for developers {\"props\":{\"pageProps\":{}},\"page\":\"/js/quickstart\",\"query\":{},\"buildId\":\"development\"}","href":"/logary-js-quickstart"}}